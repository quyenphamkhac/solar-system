name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
jobs:
  unit-testing:
    name: Unit Testing
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    strategy:
      matrix:
        nodejs_version: [20]
        operating_system: [ubuntu-latest, macos-latest]
        exclude:
          - nodejs_version: 20
            operating_system: macos-latest
    runs-on: ${{ matrix.operating_system }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup NodeJS Version
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.nodejs_version }}

    - name: Cache NPM dependencies
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

    - name: Install Dependencies
      run: npm install

    - name: Unit Testing
      id: nodejs-testing-step
      run: npm test
      
    - name: Archive Test Result
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Mocha-Test-Result
        path: test-results.xml
  
  code-coverage:
    name: Code Coverage
    container:
      image: node:18
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options:
          --name mongo
    env:
      MONGO_URI: 'mongodb://mongo:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    # - name: Setup NodeJS Version - 18
    #   uses: actions/setup-node@v4
    #   with:
    #     node-version: 18

    - name: Cache NPM Dependencies
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
    
    - name: Install Dependencies
      run: npm install
    
    - name: Check Code Coverage
      continue-on-error: true
      run: npm run coverage

    - name: Archive Test Result
      uses: actions/upload-artifact@v4
      with:
        name: Code-Coverage-Result
        path: coverage
        retention-days: 5

  docker:
    name: Containerization
    needs: [unit-testing, code-coverage]
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4
    
    - name: Dockerhub Login
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    - name: GHCR Login
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Docker Build For Testing
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/my-solar-system:${{ github.sha }}
          ghcr.io/${{ github.repository_owner }}/my-solar-system:${{ github.sha }}
    
    - name: Docker Image Testing
      run: |
        docker images
        docker run --name my-solar-system-app -d \
          -p 3000:3000 \
          -e MONGO_URI=$MONGO_URI \
          -e MONGO_USERNAME=$MONGO_USERNAME \
          -e MONGO_PASSWORD=$MONGO_PASSWORD \
          ${{ env.DOCKERHUB_USERNAME }}/my-solar-system:${{ github.sha }}
        
        export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' my-solar-system-app)
        echo $IP

        echo Testing Image URL using wget
        wget -q -O - 127.0.0.1:3000/live | grep live
    
    - name: Docker Push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/my-solar-system:${{ github.sha }}
          ghcr.io/${{ github.repository_owner }}/my-solar-system:${{ github.sha }}

  dev-deploy:
    needs: docker
    environment:
      name: development
      url: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
    outputs:
      APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4

    - name: Install kubectl CLI
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.26.0'
    
    - name: Set Kubeconfig file
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBECONFIG }}
    
    - name: Fetch Kubernetes Cluster Detail
      run: |
        kubectl version --short
        echo ----------------------------------------------
        kubectl get nodes

    - name: Save Nginx Ingress Controller IP as a GITHUB Environment Variable
      run: |
        echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" >> "$GITHUB_ENV"
    
    - name: Replace Token in Manifest files
      uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '_{_'
        tokenSuffix: '_}_'
        files: '["kubernetes/development/*.yaml"]'
      env:
        NAMESPACE: ${{ vars.NAMESPACE }}
        REPLICAS: ${{ vars.REPLICAS }}
        IMAGE: ${{ env.DOCKERHUB_USERNAME }}/my-solar-system:${{ github.sha }}
        INGRESS_IP: ${{ env.INGRESS_IP }}

    - name: Check Manifest files
      run: |
        cat kubernetes/development/*.yaml
    
    - name: Create MongoDB Secret
      run: |
        kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
          --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
          --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
          --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
          --save-config \
          --dry-run=client \
          -o yaml | kubectl apply -f -
    
    - name: Deploy to Dev Env
      run: |
        kubectl apply -f kubernetes/development

    - name: Set App Ingress Host URL
      id: set-ingress-host-address
      run: |
        echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath='{.items[0].spec.tls[0].hosts[0]}')" >> "$GITHUB_OUTPUT"

  dev-integration-testing:
    name: Dev Integration Testing
    needs: dev-deploy
    runs-on: ubuntu-latest
    env:
      URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
    steps:
    - name: Test URL Output using CURL and JQ
      run: |
        echo "----------------------------------"
        curl https://$URL/live -s -k | jq -r .status | grep -i live

  prod-deploy:
    needs: docker
    environment:
      name: production
      url: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
    outputs:
      APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4

    - name: Install kubectl CLI
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.26.0'
    
    - name: Set Kubeconfig file
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBECONFIG }}
    
    - name: Fetch Kubernetes Cluster Detail
      run: |
        kubectl version --short
        echo ----------------------------------------------
        kubectl get nodes

    - name: Save Nginx Ingress Controller IP as a GITHUB Environment Variable
      run: |
        echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" >> "$GITHUB_ENV"
    
    - name: Replace Token in Manifest files
      uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '_{_'
        tokenSuffix: '_}_'
        files: '["kubernetes/production/*.yaml"]'
      env:
        NAMESPACE: ${{ vars.NAMESPACE }}
        REPLICAS: ${{ vars.REPLICAS }}
        IMAGE: ${{ env.DOCKERHUB_USERNAME }}/my-solar-system:${{ github.sha }}
        INGRESS_IP: ${{ env.INGRESS_IP }}

    - name: Check Manifest files
      run: |
        cat kubernetes/development/*.yaml
    
    - name: Create MongoDB Secret
      run: |
        kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
          --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
          --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
          --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
          --save-config \
          --dry-run=client \
          -o yaml | kubectl apply -f -
    
    - name: Deploy to Prod Env
      run: |
        kubectl apply -f kubernetes/production

    - name: Set App Ingress Host URL
      id: set-ingress-host-address
      run: |
        echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath='{.items[0].spec.tls[0].hosts[0]}')" >> "$GITHUB_OUTPUT"

  prod-integration-testing:
    name: Prod Integration Testing
    needs: prod-deploy
    runs-on: ubuntu-latest
    env:
      URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}
    steps:
    - name: Test URL Output using CURL and JQ
      run: |
        echo "----------------------------------"
        curl https://$URL/live -s -k | jq -r .status | grep -i live